version "4.5"

#include "ZScript/MerchZForms/Include.zsc" // [Ace] For the menu.
#include "ZSCRIPT.MerchantMenu.zsc"
#include "ZSCRIPT.MerchantStore.zsc"
#include "ZSCRIPT.StoreItems.zsc"
#include "ZSCRIPT.MerchantSkins.zsc"
#include "ZSCRIPT.SlotMachine.zsc"
#include "ZSCRIPT.PlayingCards.zsc"
#include "ZSCRIPT.Poker.zsc"
#include "ZSCRIPT.Crystals.zsc"
#include "ZSCRIPT.Bounty.zsc"

class MerchantHandler : EventHandler
{
	private int MoneyMode;

	override void NetworkProcess(ConsoleEvent e)
	{
		let plr = players[e.Player].mo;

		if (e.Name ~== "HDM_AssemblePokerGame")
		{
			AssembleGame(plr);
			return;
		}

		if (e.Name ~== "HDM_PlaceBet")
		{
			PlaceBet(CardPlayers[PlayerIndex], e.Args[0]);
			return;
		}

		if (e.Name ~== "HDM_Fold")
		{
			CardPlayers[PlayerIndex].HasFolded = true;
			ActionTimer = 0;
			RotatePlayer();
			return;
		}

		if (e.Name ~== "HDM_Check")
		{
			ActionTimer = 0;
			CardPlayers[PlayerIndex].HasChecked = true;
			CardPlayers[PlayerIndex].Player.A_StartSound("Poker/Check", 10, CHANF_UI, attenuation: 1.5);
			RotatePlayer();
			return;
		}

		Array<string> ParsedName;
		e.Name.Split(ParsedName, ":");
		if (ParsedName[0] ~== "HDM_BuyStuff")
		{
			for (int i = 0; i < Stores.Size(); ++i)
			{
				StoreItem item;
				for (int j = 0; j < Stores[i].StoreItems.Size(); ++j)
				{
					if (Stores[i].StoreItems[j].GetClass() == ParsedName[1])
					{
						item = Stores[i].StoreItems[j];
						break;
					}
				}

				if (item && plr)
				{
					class<Actor> ItemClass = item.GetItem();
					int Amount = item.GetAmount();

					StoreCurrency Currency = StoreCurrencies[e.Args[0]];
					int Price = StoreItem.GetAdjustedPrice(item, Currency);

					if (Price > plr.CountInv(Currency.GetCurrencyClass()))
					{
						plr.A_StartSound("Merchant/BuyFailure", 15, CHANF_LOCAL | CHANF_UI);
						return;
					}

					if (!(ItemClass is 'HDPickup') ||  ItemClass is 'HDPickupGiver')
					{
						Actor a; bool success;
						[success, a] = plr.A_SpawnItemEx(ItemClass, 6, 0, plr.height - 8, frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(2.0, 5.0), 0, SXF_NOCHECKPOSITION);
						if (success && a is 'Inventory')
						{
							Inventory(a).Amount = amount;
						}
					}
					else
					{
						class<Inventory> InvClass = (class<Inventory>)(ItemClass);
						int MaxGive = GetDefaultByType(InvClass).MaxAmount - plr.CountInv(InvClass);
						int MaxActualGive = min(Amount, MaxGive);

						// [Ace] Give what you can directly and drop the rest on the ground.
						plr.A_GiveInventory(InvClass, MaxActualGive);
						Amount -= MaxActualGive;

						if (Amount > 0)
						{
							Actor a; bool success;
							[success, a] = plr.A_SpawnItemEx(InvClass, 6, 0, plr.height - 8, frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(2.0, 5.0), 0, SXF_NOCHECKPOSITION);
							if (success)
							{
								Inventory(a).Amount = Amount;
							}
						}
					}
					plr.A_TakeInventory(Currency.GetCurrencyClass(), Price);
					plr.A_StartSound("Merchant/BuySuccess", 16, CHANF_LOCAL | CHANF_UI);

					item.StoreAmount--;
					if (item.StoreAmount == 0)
					{
						Stores[i].StoreItems.Delete(Stores[i].StoreItems.Find(item));
						item.Destroy();
					}
					break;
				}
			}
		}
	}

	override void WorldLoaded(WorldEvent e)
	{
		if (e.IsReopen)
		{
			return;
		}

		MoneyMode = hdm_moneymode == 2 ? random(0, 1) : hdm_moneymode;
		
		InitCurrencies();
		for (int i = 0; i < Stores.Size(); ++i)
		{
			InitStore(i);
		}

		Array<class<HDMerchant> > AvailableMerchants;
		AvailableMerchants.Push((class<HDMerchant>)('AmmoMerchant'));
		AvailableMerchants.Push((class<HDMerchant>)('ItemMerchant'));
		AvailableMerchants.Push((class<HDMerchant>)('WeaponMerchant'));

		int mCount = AvailableMerchants.Size();
		int MerchantsLeft = min(mCount, level.MapName ~== "LOTSAGUN" ? mCount : CVar.GetCVar('hdm_maxmerchants').GetInt());

		Array<Sector> dedicatedMerchantSectors;
		Array<Sector> dedicatedSlotSectors;
		Array<Sector> secretSectors;

		for (int i = 0; i < level.Sectors.Size(); ++i)
		{
			Sector sec = level.Sectors[i];
			if (sec.GetUDMFInt('user_merchantsector') == 1)
			{
				dedicatedMerchantSectors.Push(sec);
				continue;
			}

			if (sec.GetUDMFInt('user_slotmachinesector') == 1)
			{
				dedicatedSlotSectors.Push(sec);
				continue;
			}

			// [Ace] Secret sectors that are already dedicated don't count.
			
			// NOTE I: Don't spawn stuff in low sectors to prevent softlocking. You can climb crystals, but not if you slam your head into the ceiling doing so.
			if (sec.IsSecret() && dedicatedMerchantSectors.Find(sec) == dedicatedMerchantSectors.Size() && dedicatedSlotSectors.Find(sec) == dedicatedSlotSectors.Size())
			{
				vector2 center = sec.centerspot;
				double secHeight = abs(sec.floorplane.ZAtPoint(center) - sec.ceilingplane.ZAtPoint(center));
				if (secHeight < 96)
				{
					continue;
				}

				secretSectors.Push(sec);
			}
		}

		int validSectorCount = secretSectors.Size();
		if (validSectorCount == 0 && dedicatedMerchantSectors.Size() == 0 && dedicatedSlotSectors.Size() == 0)
		{
			return;
		}

		// [Ace] Sort sectors by size in ascending order. Spawn merchants in smaller sectors first. Tiberium is the opposite - it prioritizes bigger sectors first.
		for (int i = 0; i < secretSectors.Size() - 1; ++i)
		{
			for (int j = i + 1; j < secretSectors.Size(); ++j)
			{
				if (AceCore.GetSectorSize(secretSectors[i]) > AceCore.GetSectorSize(secretSectors[j]))
				{
					let swap = secretSectors[i];
					secretSectors[i] = secretSectors[j];
					secretSectors[j] = swap;
				}
			}
		}

		// ------------------------------------------------------------------------------------------------------------------------
		//
		// BITCHES DON'T KNOW 'BOUT MY TIBERIUM DEPOSITS.
		// 
		// ------------------------------------------------------------------------------------------------------------------------

		// [Ace] Spawn the crystals first, and only then bother with the merchants.
		if (MoneyMode == 0)
		{
			for (int i = secretSectors.Size() - 1; i >= 0; --i)
			{
				if (hdm_debug >= 2 || random[merchrand](1, 100) <= max(5, 30 - 3 * (validSectorCount - 1)))
				{
					SpawnCrystals(secretSectors[i]);
					secretSectors.Delete(i);
					if (hdm_debug < 2)
					{
						break;
					}
				}
			}
		}

		// ------------------------------------------------------------------------------------------------------------------------
		//
		//	MERCHANT SPAWNING
		// 
		// ------------------------------------------------------------------------------------------------------------------------

		// [Ace] Some boilerplate because I can't make local functions and the workaround is ironically worse.
		for (int i = 0; i < dedicatedMerchantSectors.Size(); ++i)
		{
			vector3 spawnPos = (dedicatedMerchantSectors[i].centerspot, dedicatedMerchantSectors[i].floorplane.ZAtPoint(dedicatedMerchantSectors[i].centerspot));
			int spawnIndex = min(randompick(0, 0, 0, 1, 1, 2), AvailableMerchants.Size() - 1);
			Actor a = Actor.Spawn(AvailableMerchants[spawnIndex], spawnPos);
			a.angle = dedicatedMerchantSectors[i].GetUDMFInt('user_merchantangle');
			AvailableMerchants.Delete(spawnIndex);

			if (hdm_debug > 0)
			{
				Console.Printf("--------------------\nSpawned %s. Sector @\c[DarkGray]%i\c-, \c[DarkGray]%i\c-.", a.GetTag(), spawnPos.x, spawnPos.y);
			}

			if (--MerchantsLeft == 0)
			{
				break;
			}
		}

		if (MerchantsLeft > 0)
		{
			for (int i = 0; i < secretSectors.Size(); ++i)
			{
				vector3 spawnPos = (secretSectors[i].centerspot, secretSectors[i].floorplane.ZAtPoint(secretSectors[i].centerspot));
				if (!level.IsPointInLevel(spawnPos) || random[merchrand](1, 100) > max(15, 45 - 5 * (validSectorCount - 1)))
				{
					continue;
				}
				int spawnIndex = min(randompick(0, 0, 0, 1, 1, 2), AvailableMerchants.Size() - 1);
				Actor a = Actor.Spawn(AvailableMerchants[spawnIndex], spawnPos);
				a.angle = secretSectors[i].GetUDMFInt('user_merchantangle');
				AvailableMerchants.Delete(spawnIndex);
				secretSectors.Delete(i--);

				if (hdm_debug > 0)
				{
					Console.Printf("--------------------\nSpawned %s. Sector @\c[DarkGray]%i\c-, \c[DarkGray]%i\c-.", a.GetTag(), spawnPos.x, spawnPos.y);
				}

				if (--MerchantsLeft == 0)
				{
					break;
				}
			}
		}

		// ------------------------------------------------------------------------------------------------------------------------
		//
		// SLOT MACHINE SPAWNING
		// 
		// ------------------------------------------------------------------------------------------------------------------------

		bool spawnedMachine = false;
		for (int i = 0; i < dedicatedSlotSectors.Size(); ++i)
		{
			vector3 spawnPos = (dedicatedSlotSectors[i].centerspot, dedicatedSlotSectors[i].floorplane.ZAtPoint(dedicatedSlotSectors[i].centerspot));
			Actor a = Actor.Spawn('MerchantSlotMachine', spawnPos);
			a.angle = dedicatedSlotSectors[i].GetUDMFInt('user_slotmachineangle');
			spawnedMachine = true;

			if (hdm_debug > 0)
			{
				Console.Printf("--------------------\nSpawned %s. Sector @\c[DarkGray]%i\c-, \c[DarkGray]%i\c-.", a.GetTag(), spawnPos.x, spawnPos.y);
			}
		}

		if (!spawnedMachine && hdm_enableslots)
		{
			for (int i = 0; i < secretSectors.Size(); ++i)
			{
				vector3 spawnPos = (secretSectors[i].centerspot, secretSectors[i].floorplane.ZAtPoint(secretSectors[i].centerspot));
				if (!level.IsPointInLevel(spawnPos) || random[merchrand](1, 100) > max(15, 45 - 5 * (validSectorCount - 1)))
				{
					continue;
				}
				Actor a = Actor.Spawn('MerchantSlotMachine', spawnPos);
				a.angle = secretSectors[i].GetUDMFInt('user_slotmachineangle');
				secretSectors.Delete(i--);

				if (hdm_debug > 0)
				{
					Console.Printf("--------------------\nSpawned %s. Sector @\c[DarkGray]%i\c-, \c[DarkGray]%i\c-.", a.GetTag(), spawnPos.x, spawnPos.y);
				}
				break;
			}
		}
	}

	override void WorldUnloaded(WorldEvent e)
	{
		let plr = players[Net_Arbitrator].mo;
		if (!plr)
		{
			return;
		}

		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (players[i].mo)
			{
				players[i].mo.A_TakeInventory("HDMerchantBody");
			}
		}
	}

	override void WorldTick()
	{
		if (GameInProgress)
		{
			PokerTick();
		}

		if (level.time == 35 && MoneyMode == 1)
		{
			InitBounty();
		}
	}
}

// ----------------------------------------
// MERCHANT
// ----------------------------------------

class HDMerchantBody : HDPickup
{
	Default
	{
		-INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
		+HDPICKUP.NOTINPOCKETS
		HDPickup.Bulk 500;
		Inventory.MaxAmount 1;
	}
}

class HDMerchant : Actor abstract
{
	override void BeginPlay()
	{
		Super.BeginPlay();
		
		InitSkins();
		A_GiveInventory('MercenaryBucks', 250);
	}

	override void Tick()
	{
		A_SpriteOffset(0, SOffsetY);

		if (PiggyBack)
		{
			A_Face(PiggyBack);
			Warp(PiggyBack, -12, 0, 14, flags: WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
			bNOGRAVITY = true;
			bTHRUACTORS = true;
			bSOLID = false;

			Scale.Y = default.Scale.Y * PiggyBack.player.crouchfactor;

			if (PiggyBack.player.crouchfactor < 0.6 && PiggyBack.player.cmd.buttons & BT_SPEED || PiggyBack.incapacitated > 0 || PiggyBack.fallroll > 0 || PiggyBack.Health <= 0)
			{
				if (DropHoldTimer++ == 16 || PiggyBack.incapacitated > 0)
				{
					bSOLID = true;
					bNOGRAVITY = false;
					bTHRUACTORS = false;
					bFORCEYBILLBOARD = false;
					PiggyBack.A_TakeInventory("HDMerchantBody");
					PiggyBack = null;
					Scale.Y = default.Scale.Y;
					DropHoldTimer = 0;
				}
			}
			else
			{
				DropHoldTimer = 0;
			}
		}
		else
		{
			PlayerIsNear = CheckProximity("PlayerPawn", HDCONST_ONEMETRE * 4, 1, CPXF_ANCESTOR | CPXF_SETTARGET);
			if (PlayerIsNear)
			{
				A_Face(target, 15);
			}
		}

		Super.Tick();
	}

	override bool Used(Actor user)
	{
		let plr = HDPlayerPawn(user);
		let handler = MerchantHandler(EventHandler.Find("MerchantHandler"));

		if (!plr || PiggyBack == plr || Distance3D(plr) > 48 || handler.ActorIsInPokerGame(self))
		{
			return false;
		}

		if (Pissed)
		{
			plr.A_Print("\c[Red]Fuck off! Store's closed, cheater!");
			return false;
		}

		if (plr.player.cmd.buttons & BT_SPEED && !plr.CheckInventory("HDMerchantBody", 1))
		{
			DropHoldTimer = 0;
			PiggyBack = plr;
			PlayerIsNear = false; // [Ace] This forces the merchant to cease their animation.
			plr.A_GiveInventory("HDMerchantBody");
			bFORCEYBILLBOARD = true;
			return false;
		}

		if (plr.PlayerNumber() == consoleplayer)
		{
			LastUser = plr;
			handler.OpenedStoreIndex[plr.PlayerNumber()] = ItemsType;
			Menu.SetMenu('MerchantShopMenu');
		}

		if (!PiggyBack && InStateSequence(CurState, FindState('SpawnLoop')))
		{
			TryPlaySpecialAnimation();
		}

		return true;
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other is "PlayerPawn")
		{
			return Super.CanCollideWith(other, passive);
		}

		return false;
	}

	// [Ace] This is complete fucking overkill. It could have been done in like 5 lines of code but I wanted a more "generic" solution.
	protected void CheckBreathing()
	{
		if (BreatheStepHold > 0)
		{
			BreatheStepHold--;
			return;
		}

		if (BreatheHold > 0)
		{
			BreatheHold--;
			return;
		}

		if (BreatheIndex < BreatheStepsHalf)
		{
			A_SetScale(Scale.X, Scale.Y + BreatheScaleStep);
			BreatheStepHold = BreatheStepDelay;
			if (++BreatheIndex == BreatheStepsHalf)
			{
				BreatheHold = BreatheInOutDelay;
			}
		}
		else if (BreatheIndex >= BreatheStepsHalf)
		{
			A_SetScale(Scale.X, Scale.Y - BreatheScaleStep);
			BreatheStepHold = BreatheStepDelay;
			if (++BreatheIndex == BreatheSteps)
			{
				BreatheIndex = 0;
				BreatheHold = BreatheInOutDelay;
			}
		}
	}

	protected void BuyingIdle(StateLabel goAwayState, string snd)
	{
		CheckBreathing();
		if (!PlayerIsNear)
		{
			A_StartSound(snd, CHAN_VOICE);
			SetStateLabel(goAwayState);
		}
	}

	const BreatheInOutDelay = 30;
	const BreatheStepDelay = 4;
	const BreatheMaxScale = 0.03;

	// [Ace] Always go for even values. Never, ever go for odd values. Only villains do that. Higher values mean smoother animation.
	// This number is the number of frames from completely exhaled to completely inhaled, to exhaling.
	const BreatheSteps = 4;

	const BreatheScaleStep = BreatheMaxScale / BreatheSteps;
	const BreatheStepsHalf = BreatheSteps / 2;
	private int BreatheIndex;
	private int BreatheHold;
	private int BreatheStepHold;

	private bool PlayerIsNear;

	HDPlayerPawn PiggyBack;
	private HDPlayerPawn LastUser;
	bool Pissed;

	private double SOffsetY;

	private int DropHoldTimer;

	private HDMerchantSkin SelectedSkin;

	meta int ItemsType;
	property ItemsType: ItemsType;

	Default
	{
		Mass 400;
		Height 58;
		Radius 8;
		Scale 1.0;
		+SOLID
		+NOBLOCKMONST
	}
}

class WeaponMerchant : HDMerchant
{
	Default
	{
		Tag "Weapon Merchant";
		HDMerchant.ItemsType StoreItem.SType_Weapon;
	}
}

class AmmoMerchant : HDMerchant
{
	Default
	{
		Tag "Ammo Merchant";
		HDMerchant.ItemsType StoreItem.SType_Ammo;
	}
}

class ItemMerchant : HDMerchant
{
	Default
	{
		Tag "Item Merchant";
		HDMerchant.ItemsType StoreItem.SType_Item;
	}
}

class MercenaryBucks : HDAmmo
{
	override void SplitPickup()
	{
		int splitAmt = min(Amount, random(100, 500));
		while (Amount > splitAmt)
		{
			Actor a = Spawn("MercenaryBucks", pos);
			a.vel += vel + (frandom(-1, 1), frandom(-1, 1), frandom(-1, 1));
			Scale.X *= randompick(-1, 1);
			Inventory(a).Amount = splitAmt;
			Amount -= splitAmt;
			splitAmt = min(Amount, splitAmt);
		}

		if (Amount < 1)
		{
			Destroy();
			return;
		}
	}

	override void ActualPickup(actor other, bool silent)
	{
		if (!other)
		{
			other = picktarget;
		}

		if (!other)
		{
			return;
		}

		if (heat.GetAmount(self) > 50)
		{
			return;
		}

		if (bALWAYSPICKUP)
		{
			Inventory.Touch(other);
			return;
		}

		Name gcn = GetClassName();
		int maxTake = min(Amount, HDPickup.MaxGive(other, gcn, getbulk()) * 100);
		if (maxTake < 1)
		{
			return;
		}

		if (!silent)
		{
			other.A_StartSound(pickupsound, CHAN_AUTO);
			HDPickup.LogPickupMessage(other, PickupMessage());
		}

		if (maxTake < Amount)
		{
			HDF.Give(other, gcn, maxtake);
			Amount -= maxTake;
			SplitPickup();
		}
		else
		{
			if (!other.FindInventory(GetClass()))
			{
				AttachToOwner(other);
			}
			else
			{
				HDF.Give(other, gcn, maxtake);
				Destroy();
			}
		}
	}

	override bool IsUsed()
	{
		return true;
	}

	private int BuckFrame;

	Default
	{
		+FORCEXYBILLBOARD
		Tag "Bucks";
		Inventory.Icon "MBCKA0";
		+HDPICKUP.CHEATNOGIVE
		+HDPICKUP.MULTIPICKUP
		+HDPICKUP.FITSINBACKPACK
		-HDPICKUP.DROPTRANSLATION
		HDPickup.Bulk 0.07;
		HDPickup.RefID "bux";
		Inventory.MaxAmount 20000;
		Inventory.PickupMessage "Picked up some bucks.";
		Scale 0.4;
	}

	States
	{
		Spawn:
			MBCK A -1;
			Stop;
	}
}