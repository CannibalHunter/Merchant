extend class MerchantHandler
{
	private void InitBounty()
	{
		Array<class<BountyThinker> > bountyThinkers;
		for (int i = 0; i < AllClasses.Size(); ++i)
		{
			if (AllClasses[i] is 'BountyThinker' && !AllClasses[i].IsAbstract())
			{
				bountyThinkers.Push((class<BountyThinker>)(AllClasses[i]));
			}
		}

		Array<Actor> chosenActors;

		ThinkerIterator it = ThinkerIterator.Create('Actor', Thinker.STAT_DEFAULT);
		Actor a = null;
		while ((a = Actor(it.Next())))
		{
			if (!a.bISMONSTER || !a.bSHOOTABLE)
			{
				continue;
			}
		
			for (int i = 0; i < bountyThinkers.Size(); ++i)
			{
				Name actorName = String.Format(bountyThinkers[i].GetClassName()).Mid(14);
				if (a.GetClassName() == actorName)
				{
					chosenActors.Push(a);
				}
			}
		}

		if (chosenActors.Size() > 0)
		{
			Actor randAct = chosenActors[random(0, chosenActors.Size() - 1)];
			BountyThinker.Create("BountyThinker_"..randAct.GetClassName(), randAct);
			return;
		}
	}
}

// ----------------------------------------------------------------------
//
// EFFECTS - Monster-agnostic
// 
// ----------------------------------------------------------------------

class BountyEffect abstract play
{
	abstract void Init();
	virtual void Tick() {}

	void UpdateDynamicLight()
	{
		if (DynLight)
		{
			DynLight.SetOrigin(TrackedActor.pos + (0, 0, TrackedActor.height / 2), true);
		}
	}

	void CreateDynamicLight(class<PointLight> cls, int r, int g, int b, int size1, int size2)
	{
		DynLight = PointLight(Actor.Spawn("PointLight", TrackedActor.pos + (0, 0, TrackedActor.height / 2)));
		DynLight.Args[0] = r;
		DynLight.Args[1] = g;
		DynLight.Args[2] = b;
		DynLight.Args[3] = size1;
		DynLight.Args[4] = size2;
		DynLight.target = TrackedActor;
		DynLight.bATTENUATE = true;
	}

	override void OnDestroy()
	{
		if (DynLight)
		{
			DynLight.Destroy();
		}
	}

	private PointLight DynLight;
	Actor TrackedActor;
}

// ----------------------------------------------------------------------
//
// ----------------------------------------------------------------------

class BountyEffectStandard : BountyEffect
{
	override void Init()
	{
		let sld = HDMagicShield(TrackedActor.FindInventory('HDMagicShield'));
		if (sld)
		{
			sld.MaxAmount = sld.Amount = sld.MaxAmount << 2;
		}
		else
		{
			sld = HDMagicShield(TrackedActor.GiveInventoryType('HDMagicShield'));
			sld.MaxAmount = sld.Amount = 3000;
			sld.bSTANDSTILL = true;
			sld.bQUICKTORETALIATE = false;
		}

		// [Ace] Changing StartHealth will change the return of subsequent SpawnHealth calls.
		TrackedActor.StartHealth = TrackedActor.Health = TrackedActor.SpawnHealth() << 2;
		TrackedActor.bMISSILEMORE = true;
		TrackedActor.bMISSILEEVENMORE = true;

		CreateDynamicLight('PointLight', 0xFF, 0xEE, 0x11, 48, 52);
	}

	override void Tick()
	{
		BountyBodyTrail trail = BountyBodyTrail(TrackedActor.Spawn('BountyBodyTrail', TrackedActor.Vec3Angle(-1, TrackedActor.angle)));
		trail.angle = TrackedActor.angle;
		trail.sprite = TrackedActor.sprite;
		trail.frame = TrackedActor.frame;
		trail.scale = TrackedActor.scale;
		UpdateDynamicLight();
	}
}

class BountyBodyTrail : Actor
{
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+BRIGHT
		Renderstyle "AddShaded";
		StencilColor "FFEE11";
	}

	States
	{
		Spawn:
			#### # 1
			{
				scale += (0.02, 0.02);
				A_FadeOut(0.1);
			}
			Loop;
	}
}

// ----------------------------------------------------------------------
//
// BOUNTIES - Monster-specific
// 
// ----------------------------------------------------------------------

class BountyThinker : Thinker abstract
{
	private Actor TrackedActor;
	private BountyEffect Effect;
	protected abstract int GetBounty();

	static BountyThinker Create(class<BountyThinker> cls, Actor other, class<BountyEffect> effect = null)
	{
		let thk = BountyThinker(new(cls));
		thk.TrackedActor = other;

		if (effect)
		{
			thk.Effect = BountyEffect(new(effect));
		}
		else
		{
			Array<class<BountyEffect> > effects;
			for (int i = 0; i < AllClasses.Size(); ++i)
			{
				if (AllClasses[i] is 'BountyEffect' && !AllClasses[i].IsAbstract())
				{
					effects.Push((class<BountyEffect>)(AllClasses[i]));
				}
			}
			thk.Effect = BountyEffect(new(effects[random(0, effects.Size() - 1)]));
		}
		thk.Effect.TrackedActor = other;
		thk.Effect.Init();
		return thk;
	}

	override void Tick()
	{
		if (!TrackedActor || !Effect)
		{
			Destroy();
			return;
		}

		if (TrackedActor.Health <= 0)
		{
			TrackedActor.A_StartSound("Bounty/HelloILikeMoney", 10, CHANF_OVERLAP, attenuation: 0.75);
			let bucks = MercenaryBucks(Actor.Spawn('MercenaryBucks', TrackedActor.pos + (0, 0, TrackedActor.height / 2)));
			bucks.A_ChangeVelocity(frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(2.0, 5.0));
			bucks.Amount = GetBounty();
			Destroy();
			return;
		}
		else
		{
			Effect.Tick();
		}
	}

	override void OnDestroy()
	{
		if (Effect)
		{
			Effect.Destroy();
		}
	}
}

// ----------------------------------------------------------------------
// 
// ----------------------------------------------------------------------

class BountyThinker_Regentipede : BountyThinker { override int GetBounty() { return 100; } }
class BountyThinker_UndeadRifleman : BountyThinker { override int GetBounty() { return 150; } }
class BountyThinker_PainBringer : BountyThinker { override int GetBounty() { return 400; } }
class BountyThinker_PainLord : BountyThinker { override int GetBounty() { return 700; } }
class BountyThinker_Trilobite : BountyThinker { override int GetBounty() { return 600; } }
class BountyThinker_Necromancer : BountyThinker { override int GetBounty() { return 1000; } }
class BountyThinker_SatanRobo : BountyThinker { override int GetBounty() { return 200; } }
class BountyThinker_Technorantula : BountyThinker { override int GetBounty() { return 4000; } }

class BountyThinker_CabalCultist : BountyThinker { override int GetBounty() { return 200; } }
class BountyThinker_CabalFanatic : BountyThinker { override int GetBounty() { return 250; } }
class BountyThinker_CabalAcolyte : BountyThinker { override int GetBounty() { return 350; } }
class BountyThinker_CabalZealot : BountyThinker { override int GetBounty() { return 500; } }