version "4.2"

#include "ZScript/AceMerchant.zsc"

class MerchantHandler : StaticEventHandler
{
	override void WorldLoaded(WorldEvent e)
	{
		if (e.IsSaveGame) return;

		for (int i = 0; i < level.Sectors.Size(); ++i)
		{
			Sector CurrSec = level.Sectors[i];
			vector3 SpawnPos = (CurrSec.centerspot.x, CurrSec.centerspot.y, CurrSec.floorplane.ZAtPoint(CurrSec.centerspot));

			if (CurrSec.IsSecret() && random(1, 100) <= max(10, 25 - 2 * level.total_secrets))
			{
				Actor.Spawn("AceMerchant", SpawnPos);
			}
		}
	}

	override void PlayerEntered(PlayerEvent e)
	{
		let plr = players[e.PlayerNumber].mo;
		for (int i = 0; i < AllActorClasses.Size(); ++i)
		{
			Name cls = AllActorClasses[i].GetClassName();
			switch (cls)
			{
				case 'HDOtisLightAmmo': TryGiveCheck(plr, "HDOtisLightAmmoCheck"); break;
				case 'HDOtisHeavyAmmo': TryGiveCheck(plr, "HDOtisHeavyAmmoCheck"); break;
			}
		}
	}

	private void TryGiveCheck(Actor plr, class<CompatItemChecker> item)
	{
		if (plr && !plr.CheckInventory(item, 1))
		{
			plr.A_GiveInventory(item);
		}
	}
}

class CompatItemChecker : Inventory
{
	override bool HandlePickup(Inventory item)
	{
		if (item.GetClass() == GetClass() && owner)
		{
			owner.A_GiveInventory(ItemToGive, AmountToGive);
		}

		return false;
	}

	string ItemToGive;
	int AmountToGive;
	Property ItemToGive: ItemToGive, AmountToGive;
	Default
	{
		Inventory.MaxAmount 2;
		+INVENTORY.UNDROPPABLE
	}
}

// [Ace] Commence compatibility!

class HDOtisLightAmmoCheck : CompatItemChecker { Default { CompatItemChecker.ItemToGive "HDOtisLightAmmo", 40; } }
class HDOtisHeavyAmmoCheck : CompatItemChecker { Default { CompatItemChecker.ItemToGive "HDOtisHeavyAmmo", 20; } }