version "4.2"

class MerchantHandler : StaticEventHandler
{
	override void WorldLoaded(WorldEvent e)
	{
		if (e.IsSaveGame) return;

		for (int i = 0; i < level.Sectors.Size(); ++i)
		{
			Sector CurrSec = level.Sectors[i];
			vector3 SpawnPos = (CurrSec.centerspot.x, CurrSec.centerspot.y, CurrSec.floorplane.ZAtPoint(CurrSec.centerspot));

			if (CurrSec.IsSecret() && random(1, 100) <= max(8, 20 - 2 * level.total_secrets))
			{
				Actor.Spawn("AceMerchant", SpawnPos);
				break;
			}
		}
	}

	override void PlayerEntered(PlayerEvent e)
	{
		let plr = players[e.PlayerNumber].mo;
		for (int i = 0; i < AllActorClasses.Size(); ++i)
		{
			Name cls = AllActorClasses[i].GetClassName();
			switch (cls)
			{
				case 'HDOtisGun': plr.A_GiveInventory("HDOtisCheck"); break;
				case 'HDTeleporter': plr.A_GiveInventory("HDTeleporterCheck"); break;
				case 'HackedReloader': plr.A_GiveInventory("HDHackedReloaderCheck"); break;
				case 'HDUniversalReloader': plr.A_GiveInventory("HDUniReloaderCheck"); break;
				case 'LadderLauncher': plr.A_GiveInventory("HDLadderLauncherCheck"); break;
				case 'HDArmorPatchKit': plr.A_GiveInventory("HDArmorPatchKitCheck"); break;
			}
		}
	}
}

// ----------------------------------------
// COMPATIBILITY
// ----------------------------------------

class CompatibilityCheck : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE
	}
}

class StoreItem : Inventory
{
	override void AttachToOwner(Actor other)
	{
		if (other)
		{
			other.A_GiveInventory(GiveItem, GiveAmount);
		}
	}

	string GiveItem;
	int GiveAmount;
	Property GiveItem: GiveItem, GiveAmount;
}

// ---------- VANILLA ----------

// [Ace] These exist because the Dialog's GiveItem only supports an amount of 1.
class HD355Store : StoreItem { Default { StoreItem.GiveItem "HDRevolverAmmo", 72; } }
class HDRocketsStore : StoreItem { Default { StoreItem.GiveItem "HDRocketAmmo", 5; } }

// ---------- OTIS-5 ----------

class HDOtisCheck : CompatibilityCheck { }
class HDOtisLightAmmoStore : StoreItem { Default { StoreItem.GiveItem "HDOtisLightAmmo", 40; } }
class HDOtisHeavyAmmoStore : StoreItem { Default { StoreItem.GiveItem "HDOtisHeavyAmmo", 20; } }

// ---------- TELEPORTER ----------

class HDTeleporterCheck : CompatibilityCheck { }
class HDTeleporterStore: StoreItem { Default { StoreItem.GiveItem "HDTeleporter", 1; } }

// ---------- HACKED RELOADER ----------

class HDHackedReloaderCheck : CompatibilityCheck { }
class HDHackedReloaderStore: StoreItem { Default { StoreItem.GiveItem "HackedReloader", 1; } }

// ---------- UNIVERSAL RELOADER ----------

class HDUniReloaderCheck : CompatibilityCheck { }
class HDUniReloaderStore: StoreItem { Default { StoreItem.GiveItem "HDUniversalReloader", 1; } }

// ---------- LADDER LAUNCHER ----------

class HDLadderLauncherCheck : CompatibilityCheck { }
class HDLadderLauncherStore: StoreItem { Default { StoreItem.GiveItem "LadderLauncher", 1; } }

// ---------- ARMOR PATCH KIT ----------

class HDArmorPatchKitCheck : CompatibilityCheck { }
class HDArmorPatchKitStore: StoreItem { Default { StoreItem.GiveItem "HDArmorPatchKit", 1; } }

// ----------------------------------------
// MERCHANT
// ----------------------------------------

class AceMerchant : Actor
{	
	override void Tick()
	{
		if (CheckProximity("PlayerPawn", 96, 1, CPXF_ANCESTOR | CPXF_SETTARGET))
		{
			Angle = AngleTo(target);
		}
		else if (target && Distance3D(target) > 96)
		{
			// [Ace] Allow other people to talk to the NPC as well, but you'll need to keep a distance so the pointer gets nullified.
			let plr = PlayerPawn(target);
			if (plr && plr.player)
			{
				plr.player.ConversationNPC = null;
			}
		}

		Super.Tick();
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other is "PlayerPawn")
		{
			return Super.CanCollideWith(other, passive);
		}

		return false;
	}

	Default
	{
		Mass 100;
		Height 64;
		Radius 8;
		+SOLID
		+PUSHABLE
		+NOBLOCKMONST
	}

	States
	{
		Spawn:
			AMRC # -1 NoDelay
			{
				frame = CVar.GetCVar("hdm_skin");
			}
			Stop;
	}
}