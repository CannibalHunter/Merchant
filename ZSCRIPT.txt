version "4.2"

class MerchantHandler : StaticEventHandler
{
	override void WorldLoaded(WorldEvent e)
	{
		if (e.IsSaveGame) return;

		for (int i = 0; i < level.Sectors.Size(); ++i)
		{
			Sector CurrSec = level.Sectors[i];
			vector3 SpawnPos = (CurrSec.centerspot.x, CurrSec.centerspot.y, CurrSec.floorplane.ZAtPoint(CurrSec.centerspot));

			if (CurrSec.IsSecret() && random(1, 100) <= max(8, 20 - 2 * level.total_secrets))
			{
				Actor.Spawn("AceMerchant", SpawnPos);
				break;
			}
		}
	}

	override void PlayerEntered(PlayerEvent e)
	{
		let plr = players[e.PlayerNumber].mo;
		for (int i = 0; i < AllActorClasses.Size(); ++i)
		{
			Name cls = AllActorClasses[i].GetClassName();
			switch (cls)
			{
				case 'HDOtisGun': plr.A_GiveInventory("HDOtisCheck"); break;
			}
		}
	}
}

// ----------------------------------------
// COMPATIBILITY
// ----------------------------------------

class CompatibilityCheck : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE
	}
}

class StoreItem : Inventory
{
	override void AttachToOwner(Actor other)
	{
		if (other)
		{
			other.A_GiveInventory(GiveItem, GiveAmount);
		}
	}

	string GiveItem;
	int GiveAmount;
	Property GiveItem: GiveItem, GiveAmount;
}

// ---------- VANILLA ----------

// [Ace] These exist because the Dialog's GiveItem only supports an amount of 1.
class HD355Store : StoreItem { Default { StoreItem.GiveItem "HDRevolverAmmo", 72; } }
class HDRocketsStore : StoreItem { Default { StoreItem.GiveItem "HDRocketAmmo", 5; } }

// ---------- OTIS-5 ----------

class HDOtisCheck : CompatibilityCheck { }
class HDOtisLightAmmoStore : StoreItem { Default { StoreItem.GiveItem "HDOtisLightAmmo", 40; } }
class HDOtisHeavyAmmoStore : StoreItem { Default { StoreItem.GiveItem "HDOtisHeavyAmmo", 20; } }

// ----------------------------------------
// MERCHANT
// ----------------------------------------

class AceMerchant : Actor
{
	override void PostBeginPlay()
	{
		if (random(1, 100) <= 60)
		{
			A_SpawnItemEx("BrassChest", random(16, 32), angle: random(0, 359), flags: SXF_NOCHECKPOSITION | SXF_SETMASTER);
		}

		Super.PostBeginPlay();
	}
	
	override void Tick()
	{
		if (CheckProximity("PlayerPawn", 96, 1, CPXF_ANCESTOR | CPXF_SETTARGET))
		{
			Angle = AngleTo(target);
		}
		else if (target && Distance3D(target) > 96)
		{
			// [Ace] Allow other people to talk to the NPC as well, but you'll need to keep a distance so the pointer gets nullified.
			let plr = PlayerPawn(target);
			if (plr && plr.player)
			{
				plr.player.ConversationNPC = null;
			}
		}

		Super.Tick();
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other is "PlayerPawn")
		{
			return Super.CanCollideWith(other, passive);
		}

		return false;
	}

	Default
	{
		Mass 100;
		Height 64;
		Radius 8;
		+SOLID
		+PUSHABLE
	}

	States
	{
		Spawn:
			AMRC H -1;
			Stop;
	}
}

class BrassChest : Actor
{
	private string GetRandomMessage() const
	{
		static const string Messages[] =
		{
			"Noooo! My stash! Why would you do that!? I'm not selling to you anymore.",
			"My precious brass! That's it, no more goods from me!",
			"Sure, take it all! See if I care... WELL I DO! THERE YOU HAVE IT, NO MORE SHOP!",
			"What are you doing!? Leave my precious brass alone! I've had it, I'm not going to sell to you.",
			"Do you know what you have done!? I'm closing shop thanks to that.",
			"Do you have ANY idea how long it took me to collect those!? Get out of here!",
			"Fine. It's not like you won't give them back to me soon. But now GIT!"
		};

		return Messages[random(0, Messages.Size() - 1)];
	}

	override bool Used(Actor user)
	{
		if (!Opened)
		{
			user.A_Log("\c[White]Brass Collector: \c[Green]"..GetRandomMessage().."\c-");
			user.A_StartSound("misc/chat", 20, CHANF_LOCAL);
			SetStateLabel("BrassTime");
			Angle = AngleTo(user);
			Opened = true;
			master.bINCOMBAT = true;
		}

		return Super.Used(user);
	}

	private void SpillBrass()
	{
		A_SpawnItemEx("HDSpent7mm", random(0, 4), 0, height - 6, frandom(0.3, 0.8), 0, frandom(8, 15), random(0, 359));
		DroppedBrass++;
	}

	Default
	{
		Radius 8;
		Height 20;
		+SOLID
	}

	private int MaxBrass;
	private int DroppedBrass;
	private bool Opened;

	States
	{
		Spawn:
			MCST A -1 NoDelay
			{
				MaxBrass = random(50, 250);
			}
			Stop;
		BrassTime:
			MCST BCD 2;
			MCST E 2
			{
				A_StartSound("misc/secret");
			}
		GimmeGimme:
			MCST F 2
			{
				for (int i = 0; i < 3; ++i)
				{
					SpillBrass();
				}

				if (DroppedBrass > MaxBrass)
				{
					SetStateLabel("StopYouHaveTakenAllOfMySavings");
				}
			}
			Loop;
		StopYouHaveTakenAllOfMySavings:
			MCST F -1
			{
				if (!random(0, 1))
				{
					switch(random(0, 2))
					{
						case 0:
							A_SpawnItemEx("HDFragGrenade", 0, 0, height - 6, frandom(3, 5), 0, frandom(5, 10));
							break;
						default:
							for (int i = 0; i < 3; ++i)
							{
								A_SpawnItemEx("BFGNecroShard");
							}
							break;
					}
				}
			}
			Stop;
	}
}