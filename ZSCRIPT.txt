version "4.5"

#include "ZSCRIPT.MerchantMenu.zsc"
#include "ZSCRIPT.StoreItems.zsc"
#include "ZSCRIPT.MerchantSkins.zsc"
#include "ZScript/MerchZForms/Include.zsc" // [Ace] For the menu.

class MerchantRewardStorage : Thinker
{
	int Money;

	static MerchantRewardStorage Get()
	{
		ThinkerIterator it = ThinkerIterator.Create('MerchantRewardStorage', STAT_STATIC);
		MerchantRewardStorage Storage;
		while ((Storage = MerchantRewardStorage(it.Next())))
		{
			return Storage;
		}

		// [Ace] Create a new one if none exist.
		Storage = new('MerchantRewardStorage');
		Storage.ChangeStatNum(Thinker.STAT_STATIC);
		return Storage;
	}
}

class MerchantStore play
{
	Array<StoreItem> StoreItems;
	Array<string> Categories;
}

class MerchantHandler : EventHandler
{
	Array<StoreCurrency> StoreCurrencies;
	MerchantStore Stores[3];
	int OpenedStoreIndex[MAXPLAYERS]; // [Ace] This is multiplayer bullshit.

	private MerchantRewardStorage RewardStorage;
	private int LastSecret;

	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'ClipBoxPickup':
				if (random[merchrand]() <= 8)
				{
					e.Replacement = "MercenaryCard";
				}
				break;
		}
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		let plr = players[e.Player].mo;
		Array<string> ParsedName;
		e.Name.Split(ParsedName, ":");
		if (ParsedName[0] ~== "HDM_BuyStuff")
		{
			for (int i = 0; i < Stores.Size(); ++i)
			{
				MerchantStore Store = Stores[i];
				StoreItem Item;
				for (int i = 0; i < Store.StoreItems.Size(); ++i)
				{
					if (Store.StoreItems[i].GetClass() == ParsedName[1])
					{
						Item = Store.StoreItems[i];
						break;
					}
				}

				if (Item && plr)
				{
					class<Actor> ItemClass = Item.GetItem();
					int Amount = Item.GetAmount();

					StoreCurrency Currency = StoreCurrencies[e.Args[0]];
					int Price = StoreItem.GetAdjustedPrice(Item, Currency);

					if (Price > plr.CountInv(Currency.GetCurrencyClass()))
					{
						plr.A_StartSound("Merchant/BuyFailure", 15, CHANF_LOCAL | CHANF_UI);
						return;
					}

					if (!(ItemClass is 'HDPickup') ||  ItemClass is 'HDPickupGiver')
					{
						Actor a; bool success;
						[success, a] = plr.A_SpawnItemEx(ItemClass, 6, 0, plr.height - 8, frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(2.0, 5.0), 0, SXF_NOCHECKPOSITION);
						if (success && a is 'Inventory')
						{
							Inventory(a).Amount = amount;
						}
					}
					else
					{
						class<Inventory> InvClass = (class<Inventory>)(ItemClass);
						int MaxGive = GetDefaultByType(InvClass).MaxAmount - plr.CountInv(InvClass);
						int MaxActualGive = min(Amount, MaxGive);

						// [Ace] Give what you can directly and drop the rest on the ground.
						plr.A_GiveInventory(InvClass, MaxActualGive);
						Amount -= MaxActualGive;

						if (Amount > 0)
						{
							Actor a; bool success;
							[success, a] = plr.A_SpawnItemEx(InvClass, 6, 0, plr.height - 8, frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(2.0, 5.0), 0, SXF_NOCHECKPOSITION);
							if (success)
							{
								Inventory(a).Amount = Amount;
							}
						}
					}
					plr.A_TakeInventory(Currency.GetCurrencyClass(), Price);
					plr.A_StartSound("Merchant/BuySuccess", 16, CHANF_LOCAL | CHANF_UI);

					Item.StoreAmount--;
					if (Item.StoreAmount == 0)
					{
						Store.StoreItems.Delete(Store.StoreItems.Find(Item));
						Item.Destroy();
					}
					break;
				}
			}
		}
	}

	override void WorldThingDamaged(WorldEvent e)
	{
		string FollowerClassName = "HDFollower";
		class<Actor> FollowerClass = FollowerClassName;
		if (!RewardStorage || !e.Thing || e.Thing.Health > 0 || e.Thing.bFRIENDLY || !e.Thing.bISMONSTER || e.DamageSource == e.Thing || !e.DamageSource || !(e.DamageSource is 'HDPlayerPawn') && !(e.DamageSource.target is 'HDPlayerPawn') && FollowerClass && !(e.DamageSource is FollowerClass) && e.DamageSource.GetClassName() != 'HDSoulCube')
		{
			return;
		}

		double Reward = 0;
		if (!(e.Thing is "HDMobBase"))
		{
			Reward = ceil(e.Thing.GetSpawnHealth() / 200.0); // [Ace] Not perfect, but it'll do.
		}
		else if (e.Thing is "ZombieStormTrooper" || e.Thing is "HideousShotgunGuy" || e.Thing is "Babuin" || e.Thing is "UndeadHomeboy")
		{
			Reward = 0.50;
		}
		else if (e.Thing is "Serpentipede" || e.Thing is "VulcanetteGuy")
		{
			Reward = 0.80;
		}
		else if (e.Thing is "HDMarine" || e.Thing is "NinjaPirate" || e.Thing is "Yokai")
		{
			Reward = 1.0;
		}
		else if (e.Thing is "TechnoSpider" || e.Thing is "CombatSlug" || e.Thing is "Boner" || e.Thing is "Trilobite")
		{
			Reward = 1.5;
		}
		else if (e.Thing is "PainBringer" || e.Thing is "HoopBubble")
		{
			Reward = 2.5;
		}
		else if (e.Thing is "CommanderKeen" && !random(0, 2))
		{
			Reward = 6.666;
		}
		else if (e.Thing is "PainLord")
		{
			Reward = 5;
		}
		else if (e.Thing is "Necromancer")
		{
			Reward = 35;
		}
		else if (e.Thing is "Technorantula" || e.Thing is "SatanRobo")
		{
			Reward = 50;
		}
		else if (e.Thing is "HDBossBrain")
		{
			Reward = 666;
		}

		if (Reward > 0)
		{
			int Amount = int(Reward);
			if (frandom[cashrand](0.01, 1.00) < Reward % 1.0)
			{
				Amount++;
			}
			RewardStorage.Money += Amount;
		}
	}

	void InitStore(int type)
	{
		if (!Stores[type])
		{
			Stores[type] = new('MerchantStore');
		}

		Stores[type].StoreItems.Clear();
		Stores[type].Categories.Clear();
		
		for (int i = 0; i < AllClasses.Size(); ++i)
		{
			if (AllClasses[i] is "StoreItem" && AllClasses[i] != 'StoreItem')
			{
				StoreItem Item = StoreItem(new(AllClasses[i]));
				class<Actor> a = Item.GetItem();
				if (a && Item.GetType() == type && random(1, 100) <= 80)
				{
					Item.StoreAmount = Item.GetStoreAmount();
					Stores[type].StoreItems.Push(Item);
				}
			}
		}

		for (int i = 0; i < Stores[type].StoreItems.Size(); ++i)
		{
			// [Ace] Don't duplicate categories.
			if (Stores[type].Categories.Find(Stores[type].StoreItems[i].GetCategory()) == Stores[type].Categories.Size())
			{
				Stores[type].Categories.Push(Stores[type].StoreItems[i].GetCategory());
			}
		}
	}

	void InitCurrencies()
	{
		for (int i = 0; i < AllClasses.Size(); ++i)
		{
			if (AllClasses[i] is "StoreCurrency" && AllClasses[i] != 'StoreCurrency')
			{
				StoreCurrency Currency = StoreCurrency(new(AllClasses[i]));
				class<Actor> a = Currency.GetCurrencyClass();
				if (a)
				{
					StoreCurrencies.Push(Currency);
				}
			}
		}
	}

	override void WorldLoaded(WorldEvent e)
	{
		if (e.IsReopen)
		{
			return;
		}

		InitCurrencies();
		for (int i = 0; i < Stores.Size(); ++i)
		{
			InitStore(i);
		}

		int MerchantsLeft = CVar.GetCVar('hdm_maxmerchants').GetInt();
		Array<class<HDMerchant> > AvailableMerchants;
		AvailableMerchants.Push((class<HDMerchant>)('AmmoMerchant'));
		AvailableMerchants.Push((class<HDMerchant>)('ItemMerchant'));
		AvailableMerchants.Push((class<HDMerchant>)('WeaponMerchant'));

		for (int i = 0; i < level.Sectors.Size(); ++i)
		{
			Sector CurrSec = level.Sectors[i];
			if (CurrSec.IsSecret() && random(1, 100) <= max(15, 70 - 4 * (level.total_secrets - 1)))
			{
				vector3 SpawnPos = (CurrSec.centerspot.x, CurrSec.centerspot.y, CurrSec.floorplane.ZAtPoint(CurrSec.centerspot));
				
				int SpawnIndex = min(randompick(0, 0, 0, 1, 1, 2), AvailableMerchants.Size() - 1);
				Actor.Spawn(AvailableMerchants[SpawnIndex], SpawnPos);
				AvailableMerchants.Delete(SpawnIndex);
				if (AvailableMerchants.Size() == 0 || --MerchantsLeft == 0)
				{
					break;
				}
			}
		}

		if (!hdm_enablebucks)
		{
			return;
		}

		// [Ace] Init the reward stuff, but only if it's enabled.
		RewardStorage = MerchantRewardStorage.Get();

		// [Ace] The process of rewarding players for their intense suffering.
		if (RewardStorage && RewardStorage.Money > 0)
		{
			int MaxCash = hdm_maxreward > 0 ? hdm_maxreward : int.Max;
			double TotalCash = min(RewardStorage.Money * hdm_rewardscale, MaxCash);
			int MoneyPerPlayer = int(TotalCash / GetPlayersInGame());

			for (int i = 0; i < MAXPLAYERS; ++i)
			{
				if (players[i].mo && MoneyPerPlayer > 0)
				{
					players[i].mo.A_GiveInventory("MercenaryBucks", MoneyPerPlayer);
				}
			}
			RewardStorage.Money = 0;
		}
	}

	override void WorldUnloaded(WorldEvent e)
	{
		let plr = players[Net_Arbitrator].mo;
		if (!plr)
		{
			return;
		}

		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (players[i].mo)
			{
				players[i].mo.A_TakeInventory("HDMerchantBody");
			}
		}

		Array<HDMerchant> EscortedMerchants;
		BlockThingsIterator it = BlockThingsIterator.Create(plr, 128 * 3);
		while (it.Next())
		{
			if (!(it.thing is 'HDMerchant') || plr.Distance3D(it.thing) > 128 * 3 || !plr.CheckSight(it.thing))
			{
				continue;
			}

			EscortedMerchants.Push(HDMerchant(it.thing));
		}

		if (RewardStorage && RewardStorage.Money > 0)
		{
			RewardStorage.Money = int(RewardStorage.Money * (1.0 + 0.2 * EscortedMerchants.Size()));
		}

		for (int i = 0; i < EscortedMerchants.Size(); ++i)
		{
			EscortedMerchants[i].Destroy(); // [Ace] You have escorted the merchant(s) to the exit. They won't be there if you return. Only affects hubs.
		}
	}

	private int GetPlayersInGame()
	{
		int TotalPlayers = 0;
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i])
			{
				TotalPlayers++;
			}
		}
		return TotalPlayers;
	}

	override void WorldTick()
	{
		if (RewardStorage)
		{
			if (level.found_secrets != LastSecret)
			{
				LastSecret = level.found_secrets;
				RewardStorage.Money += 15;
			}
		}
	}
}

// ----------------------------------------
// MERCHANT
// ----------------------------------------

class HDMerchantBody : HDPickup
{
	Default
	{
		-INVENTORY.INVBAR
		+INVENTORY.UNDROPPABLE
		+HDPICKUP.NOTINPOCKETS
		HDPickup.Bulk 500;
		Inventory.MaxAmount 1;
	}
}

class HDMerchant : Actor abstract
{
	override void Tick()
	{
		A_SpriteOffset(0, SOffsetY);

		if (PiggyBack)
		{
			A_Face(PiggyBack);
			Warp(PiggyBack, -12, 0, 14, flags: WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
			bNOGRAVITY = true;
			bTHRUACTORS = true;
			bSOLID = false;

			if (PiggyBack.player.crouchfactor < 1.0 || PiggyBack.incapacitated > 0)
			{
				bSOLID = true;
				bNOGRAVITY = false;
				bTHRUACTORS = false;
				PiggyBack.A_TakeInventory("HDMerchantBody");
				PiggyBack = null;
			}
		}
		else
		{
			PlayerIsNear = CheckProximity("PlayerPawn", 80, 1, CPXF_ANCESTOR | CPXF_SETTARGET);
			if (PlayerIsNear)
			{
				A_Face(target, 15);
			}
		}

		Super.Tick();
	}

	override bool Used(Actor user)
	{
		let plr = HDPlayerPawn(user);
		if (!plr || PiggyBack == plr ||  Distance3D(plr) > 48)
		{
			return false;
		}

		if (plr.player.cmd.buttons & BT_SPEED && !plr.CheckInventory("HDMerchantBody", 1))
		{
			PiggyBack = plr;
			PlayerIsNear = false; // [Ace] This forces the merchant to cease their animation.
			plr.A_GiveInventory("HDMerchantBody");
			return false;
		}

		if (plr.PlayerNumber() == consoleplayer)
		{
			LastUser = plr;
			MerchantHandler Handler = MerchantHandler(EventHandler.Find("MerchantHandler"));
			Handler.OpenedStoreIndex[plr.PlayerNumber()] = ItemsType;
			Menu.SetMenu('MerchantShopMenu');
		}

		if (!PiggyBack && InStateSequence(CurState, FindState('SpawnLoop')))
		{
			TryPlaySpecialAnimation();
		}

		return true;
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other is "PlayerPawn")
		{
			return Super.CanCollideWith(other, passive);
		}

		return false;
	}

	// [Ace] This is complete fucking overkill. It could have been done in like 5 lines of code but I wanted a more "generic" solution.
	protected void CheckBreathing()
	{
		if (BreatheStepHold > 0)
		{
			BreatheStepHold--;
			return;
		}

		if (BreatheHold > 0)
		{
			BreatheHold--;
			return;
		}

		if (BreatheIndex < BreatheStepsHalf)
		{
			A_SetScale(Scale.X, Scale.Y + BreatheScaleStep);
			BreatheStepHold = BreatheStepDelay;
			if (++BreatheIndex == BreatheStepsHalf)
			{
				BreatheHold = BreatheInOutDelay;
			}
		}
		else if (BreatheIndex >= BreatheStepsHalf)
		{
			A_SetScale(Scale.X, Scale.Y - BreatheScaleStep);
			BreatheStepHold = BreatheStepDelay;
			if (++BreatheIndex == BreatheSteps)
			{
				BreatheIndex = 0;
				BreatheHold = BreatheInOutDelay;
			}
		}
	}

	protected void BuyingIdle(StateLabel goAwayState, string snd)
	{
		CheckBreathing();
		if (!PlayerIsNear)
		{
			A_StartSound(snd, CHAN_VOICE);
			SetStateLabel(goAwayState);
		}
	}

	const BreatheInOutDelay = 30;
	const BreatheStepDelay = 4;
	const BreatheMaxScale = 0.03;

	// [Ace] Always go for even values. Never, ever go for odd values. Only villains do that. Higher values mean smoother animation.
	// This number is the number of frames from completely exhaled to completely inhaled, to exhaling.
	const BreatheSteps = 4;

	const BreatheScaleStep = BreatheMaxScale / BreatheSteps;
	const BreatheStepsHalf = BreatheSteps / 2;
	private int BreatheIndex;
	private int BreatheHold;
	private int BreatheStepHold;

	private bool PlayerIsNear;

	private HDPlayerPawn PiggyBack;
	private HDPlayerPawn LastUser;

	private double SOffsetY;

	private HDMerchantSkin SelectedSkin;

	meta int ItemsType;
	property ItemsType: ItemsType;

	Default
	{
		Mass 400;
		Height 58;
		Radius 8;
		Scale 1.0;
		+SOLID
		+NOBLOCKMONST
	}
}

class WeaponMerchant : HDMerchant
{
	Default
	{
		HDMerchant.ItemsType StoreItem.SType_Weapon;
	}
}

class AmmoMerchant : HDMerchant
{
	Default
	{
		HDMerchant.ItemsType StoreItem.SType_Ammo;
	}
}

class ItemMerchant : HDMerchant
{
	Default
	{
		HDMerchant.ItemsType StoreItem.SType_Item;
	}
}

class MercenaryBucks : HDAmmo
{
	override void SplitPickup()
	{
		int SplitAmount = min(Amount, random(20, 100));
		while (Amount > SplitAmount)
		{
			int SubSplit = min(Amount, random(20, 100));
			Actor a = Spawn("MercenaryBucks", pos);
			a.vel += vel + (frandom(-1, 1), frandom(-1, 1), frandom(-1, 1));
			Scale.X *= randompick(-1, 1);
			Inventory(a).Amount = SubSplit;
			Amount -= SubSplit;
		}

		if (Amount < 1)
		{
			Destroy();
			return;
		}
	}

	override bool IsUsed()
	{
		return true;
	}

	private int BuckFrame;

	Default
	{
		+FORCEXYBILLBOARD
		Tag "Bucks";
		Inventory.Icon "MBCKA0";
		+HDPICKUP.CHEATNOGIVE
		+HDPICKUP.MULTIPICKUP
		+HDPICKUP.FITSINBACKPACK
		-HDPICKUP.DROPTRANSLATION
		HDPickup.Bulk 0.06;
		HDPickup.RefID "bux";
		Inventory.MaxAmount 10000;
		Inventory.PickupMessage "Picked up some bucks.";
		Scale 0.4;
	}

	States
	{
		Spawn:
			MBCK A -1;
			Stop;
	}
}

class MercenaryCard : HDUPK
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		Amount = int(Amount * frandom(0.80, 1.20));
	}

	Default
	{
		HDUPK.PickupMessage "You picked up a debit card loaded with cash! Now who could have dropped it here!?";
		HDUPK.PickupType "MercenaryBucks";
		HDUPK.Amount 300;
		HDUPK.MaxUnitAmount 10000;
		Scale 0.25;
	}

	States
	{
		Spawn:
			MCRD A -1;
			Stop;
	}
}
