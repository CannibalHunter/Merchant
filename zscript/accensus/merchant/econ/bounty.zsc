extend class MerchantHandler
{
	Array<class<BountyThinker> > bountyThinkers;

	private void InitBounty(int count)
	{
		bountyThinkers.clear();

		for (int i = 0; i < AllClasses.Size(); ++i)
		{
			if (AllClasses[i] is 'BountyThinker' && !AllClasses[i].IsAbstract())
			{
				bountyThinkers.Push((class<BountyThinker>)(AllClasses[i]));
			}
		}

		Array<Actor> chosenActors;

		ThinkerIterator it = ThinkerIterator.Create('Actor', Thinker.STAT_DEFAULT);
		Actor a = null;
		while ((a = Actor(it.Next())))
		{
			// Only consider non-friendly, alive, shootable monster actors as bounty targets
			if (!a.bISMONSTER || !a.bSHOOTABLE || a.bFRIENDLY || a.health <= 0) continue;
		
			for (int i = 0; i < bountyThinkers.Size(); ++i)
			{
				// Find the appropriate BountyThinker,
				// and if the current actor hasn't been chosen and is an instance of the relevant actor class,
				// add it to the list of chosen actors.
				Name actorName = String.Format(bountyThinkers[i].GetClassName()).Mid(14);
				if (chosenActors.find(a) == chosenActors.size() && a is actorName)
				{
					chosenActors.Push(a);
				}
			}
		}

		while (chosenActors.Size() > 0 && count > 0)
		{
			// Pick a random actor out of those that were chosen,
			// and if that chosen actor hasn't had a BountyThinker assigned,
			// create a BountyThinker for that actor and remove it from further selection
			int index = random(0, chosenActors.Size() - 1);
			Actor randAct = chosenActors[index];
			for (int i = 0; i < bountyThinkers.Size(); ++i)
			{
				Name actorName = String.Format(bountyThinkers[i].GetClassName()).Mid(14);
				if (chosenActors.find(randAct) < chosenActors.size() && randAct is actorName)
				{
					if (hdm_debug) Console.Printf("--------------------\nSelected %s for bounty target, located @\c[DarkGray]%i\c-, \c[DarkGray]%i\c-.", randAct.GetTag(), randAct.pos.x, randAct.pos.y);
					BountyThinker.Create("BountyThinker_"..actorName, randAct);
					chosenActors.Delete(index);
					count--;
				}
			}
		}
	}

	int GetBounty(Actor actor) {
		
		foreach (bountyThinker : bountyThinkers)
		{
			// Find the appropriate BountyThinker,
			// and if the current actor hasn't been chosen and is an instance of the relevant actor class,
			// add it to the list of chosen actors.
			Name actorName = String.Format(bountyThinker.GetClassName()).Mid(14);
			if (actor is actorName)
			{
				let thinker = BountyThinker(new(bountyThinker));
				let bounty = thinker.GetBounty();
				thinker.destroy();

				return bounty;
			}
		}

		return -1;
	}
}

// ----------------------------------------------------------------------
//
// EFFECTS - Monster-agnostic
// 
// ----------------------------------------------------------------------

class BountyEffect abstract play
{
	abstract void Init();
	virtual void Tick() {}

	void UpdateDynamicLight()
	{
		if (DynLight)
		{
			DynLight.SetOrigin(Target.pos + (0, 0, Target.height / 2), true);
		}
	}

	void CreateDynamicLight(class<PointLight> cls, int r, int g, int b, int size1, int size2)
	{
		DynLight = PointLight(Actor.Spawn("PointLight", Target.pos + (0, 0, Target.height / 2)));
		DynLight.Args[0] = r;
		DynLight.Args[1] = g;
		DynLight.Args[2] = b;
		DynLight.Args[3] = size1;
		DynLight.Args[4] = size2;
		DynLight.target = Target;
		DynLight.bATTENUATE = true;
	}

	override void OnDestroy()
	{
		if (DynLight)
		{
			DynLight.Destroy();
		}
	}

	private PointLight DynLight;
	Actor Target;
}

// ----------------------------------------------------------------------
//
// ----------------------------------------------------------------------

class BountyEffectStandard : BountyEffect
{
	override void Init()
	{
		Necromancer necro = Necromancer(Target);
		let sld = HDMagicShield(Target.FindInventory('HDMagicShield'));
		if (sld)
		{
			sld.MaxAmount = sld.Amount = max(2000, sld.MaxAmount << 1);
		}
		else
		{
			sld = HDMagicShield(Target.GiveInventoryType('HDMagicShield'));
			sld.MaxAmount = sld.Amount = necro ? 500 : 2000;
			sld.bSTANDSTILL = true;
			sld.bQUICKTORETALIATE = necro != null;
			sld.bSOLID = necro != null;
			if (necro)
			{
				sld.Speed = 5;
			}
		}
		/*
		if (!necro)
		{
			// [Ace] Changing StartHealth will change the return of subsequent SpawnHealth calls.
			Target.StartHealth = Target.Health = Target.SpawnHealth() << 1;
		}
		else
		{
			necro.hitsleft += 2;
		}
		*/
		Target.bMISSILEMORE = true;
		Target.bMISSILEEVENMORE = true;
		

		CreateDynamicLight('PointLight', 0xFF, 0xEE, 0x11, 48, 52);
	}

	override void Tick()
	{
		BountyBodyTrail trail = BountyBodyTrail(Target.Spawn('BountyBodyTrail', Target.Vec3Angle(-1, Target.angle)));
		trail.angle = Target.angle;
		trail.sprite = Target.sprite;
		trail.frame = Target.frame;
		trail.scale = Target.scale;
		UpdateDynamicLight();

		let mob = HDMobBase(Target);
		if (mob)
		{
			mob.bloodloss = max(0, mob.bloodloss - 4);
			mob.stunned = max(0, mob.stunned - 10);
		}
	}
}

class BountyBodyTrail : Actor
{
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+BRIGHT
		Renderstyle "AddShaded";
		StencilColor "FFEE11";
	}

	States
	{
		Spawn:
			#### # 1
			{
				scale += (0.02, 0.02);
				A_FadeOut(0.1);
			}
			Loop;
	}
}

// ----------------------------------------------------------------------
//
// BOUNTIES - Monster-specific
// 
// ----------------------------------------------------------------------

class BountyThinker : Thinker abstract
{
	private Actor Target;
	private BountyEffect Effect;
	abstract int GetBounty();

	static BountyThinker Create(class<BountyThinker> cls, Actor other, class<BountyEffect> effect = null)
	{
		let thk = BountyThinker(new(cls));
		thk.Target = other;

		if (effect)
		{
			thk.Effect = BountyEffect(new(effect));
		}
		else
		{
			Array<class<BountyEffect> > effects;
			for (int i = 0; i < AllClasses.Size(); ++i)
			{
				if (AllClasses[i] is 'BountyEffect' && !AllClasses[i].IsAbstract())
				{
					effects.Push((class<BountyEffect>)(AllClasses[i]));
				}
			}
			thk.Effect = BountyEffect(new(effects[random(0, effects.Size() - 1)]));
		}
		thk.Effect.Target = other;
		thk.Effect.Init();
		return thk;
	}

	override void Tick()
	{
		if (!Target || !Effect)
		{
			Destroy();
			return;
		}

		if (Target.Health <= 0)
		{
			Target.A_StartSound("Bounty/HelloILikeMoney", 10, CHANF_OVERLAP, attenuation: 0.5);

			int amt = AceCore.GiveToPlayers('MercenaryBucks', GetBounty());
			string amtMsg = "\c[Green]$"..amt.."\c- have been deposited into your account.";
			if (!random(0, 12))
			{
				amtMsg = "\c[Gold]"..amt.."\c- golds have been deposited into your Swiss bank account.";
			}
			Target.A_Log("\c[Red]!!! BOUNTY TARGET EXECUTED !!!\c-\n"..amtMsg);
			Destroy();
			return;
		}
		else
		{
			Effect.Tick();
		}
	}

	override void OnDestroy()
	{
		if (Effect)
		{
			Effect.Destroy();
		}
	}
}

// ----------------------------------------------------------------------
// 
// ----------------------------------------------------------------------

class BountyThinker_Babuin : BountyThinker { override int GetBounty() { return 200; } }
class BountyThinker_HDHumanoid : BountyThinker { override int GetBounty() { return 250; } }
class BountyThinker_FighterImp : BountyThinker { override int GetBounty() { return 300; } }
class BountyThinker_NinjaPirate : BountyThinker { override int GetBounty() { return 350; } }
class BountyThinker_Macubus : BountyThinker { override int GetBounty() { return 500; } }
class BountyThinker_Boner : BountyThinker { override int GetBounty() { return 550; } }
class BountyThinker_Cenobite : BountyThinker { override int GetBounty() { return 600; } }
class BountyThinker_Knave : BountyThinker { override int GetBounty() { return 600; } }
class BountyThinker_Necromancer : BountyThinker { override int GetBounty() { return 666; } }
class BountyThinker_Manticore : BountyThinker { override int GetBounty() { return 700; } }
class BountyThinker_Baron : BountyThinker { override int GetBounty() { return 800; } }
class BountyThinker_SatanRobo : BountyThinker { override int GetBounty() { return 2500; } }
class BountyThinker_Spiderdemon : BountyThinker { override int GetBounty() { return 2500; } }

class BountyThinker_CabalCultist : BountyThinker { override int GetBounty() { return 200; } }
class BountyThinker_CabalFanatic : BountyThinker { override int GetBounty() { return 250; } }
class BountyThinker_CabalAcolyte : BountyThinker { override int GetBounty() { return 350; } }
class BountyThinker_CabalZealot : BountyThinker { override int GetBounty() { return 500; } }