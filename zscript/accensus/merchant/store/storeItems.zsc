class StoreCurrency abstract
{
	abstract Name GetCurrencyClass() const;
	abstract string GetIcon() const;
	virtual double GetPriceMult() const { return 1.0; }
}

class BucksCurrency : StoreCurrency
{
	override Name GetCurrencyClass() { return 'MercenaryBucks'; }
	override string GetIcon() { return "MBCKA0"; }
}

class SevenMilCurrency : StoreCurrency
{
	override Name GetCurrencyClass() { return 'SevenMilAmmo'; }
	override string GetIcon() { return "TEN7A0"; }
}

class AssemblyCoreCurrency : StoreCurrency
{
	override Name GetCurrencyClass() { return 'AssemblyCore'; }
	override string GetIcon() { return "ASCRA0"; }
	override double GetPriceMult() { return 0.01; }
}

class StoreItem abstract
{
	enum ItemType
	{
		SType_Weapon,
		SType_Ammo,
		SType_Item
	}

	// --------------------------------------------------
	// STATIC
	// --------------------------------------------------

	static int GetAdjustedPrice(StoreItem item, StoreCurrency currency)
	{
		return int(max(ceil(item.GetBasePrice() * currency.GetPriceMult()), 1));
	}

	static bool CheckClassExists(name classType) {
		return (Class<Object>) (classType) != null;
	}

	// --------------------------------------------------
	// VIRTUALS
	// --------------------------------------------------

	protected abstract int GetBasePrice(); // [Ace] The base price is for merc bucks.
	abstract string GetCategory();
	abstract string GetDisplayName();
	abstract string GetIcon();
	abstract Name GetItem();
	abstract int GetType();
	abstract bool IsEnabled();

	virtual int GetAmount() { return 1; }
	virtual string GetFlavorText() { return ""; }
	virtual int GetStoreAmount()
	{
		switch (GetType())
		{
			case SType_Weapon:
			{
				return randompick[merchrand](1, 1, 1, 1, 1, 1, 1, 2);
			}
			case SType_Ammo:
			{
				if (GetAmount() == 1)
				{
					return random[merchrand](1, 5) * hdm_stock_ammo;
				}
				return randompick[merchrand](1, 2, 3, 3, random[merchrand](2, 6)) * hdm_stock_ammo;
			}
			case SType_Item:
			{
				if (GetBasePrice() <= 15)
				{
					return randompick[merchrand](1, 2, 2, 3, 3, 3, random[merchrand](4, 7)) * hdm_stock_item;
				}
				if (GetBasePrice() <= 40)
				{
					return randompick[merchrand](1, 1, 2, 2, 2, 3, 3, 4, 4, 5) * hdm_stock_item;
				}
				if (GetBasePrice() <= 80)
				{
					return randompick[merchrand](1, 1, 1, 2, 2, 2, 3, 3) * hdm_stock_item;
				}
				return 1 * hdm_stock_item;
			}
		}

		return 666;
	}
	
	// --------------------------------------------------
	// VARIABLES
	// --------------------------------------------------

	int StoreAmount;
}