class MerchantStore play
{
	Array<StoreItem> StoreItems;
	Array<string> Categories;
}

extend class MerchantHandler
{
	Array<StoreCurrency> StoreCurrencies;
	MerchantStore Stores[3];
	int OpenedStoreIndex[MAXPLAYERS];
	
	private void InitStore(int type) {
		// Ensure Store Exists
		if (!Stores[type]) Stores[type] = new('MerchantStore');
		
		// Clean current categories & items
		Stores[type].Categories.Clear();
		Stores[type].StoreItems.Clear();
		
		foreach (cls : AllClasses) {
			if (cls is "StoreItem" && cls != 'StoreItem') {
				let item = StoreItem(new(cls));

				bool inReloadingRoom = level.MapName ~== "LOTSAGUN";
				bool inRange = level.MapName ~== "RANGE";

				static const name merchChances[] = { 'hdm_chance_weapon', 'hdm_chance_ammo', 'hdm_chance_item' };
				if (
					(Class<Actor>)(item.GetItem())
					&& item.GetType() == type
					&& item.IsEnabled()
					&& (inReloadingRoom || inRange || frandom[merchrand](0.01, 1.00) <= CVar.GetCVar(merchChances[type]).GetFloat())
				) {
					item.StoreAmount = item.GetStoreAmount();

					if (inReloadingRoom || inRange) item.StoreAmount *= random[merchrand](25, 150);

					Stores[type].StoreItems.Push(item);
				}
			}
		}

		// [Ace] Don't duplicate categories.
		foreach (currItem : Stores[type].StoreItems) {
			if (Stores[type].Categories.Find(currItem.GetCategory()) == Stores[type].Categories.Size()) {
				Stores[type].Categories.Push(currItem.GetCategory());
			}
		}
	}

	private void InitCurrencies() {
		foreach (cls : AllClasses) {
			if (cls is "StoreCurrency" && cls != 'StoreCurrency') {
				let currency = StoreCurrency(new(cls));
				if ((Class<Actor>)(currency.GetCurrencyClass())) StoreCurrencies.Push(currency);
			}
		}
	}
}