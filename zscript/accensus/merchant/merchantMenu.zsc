class MerchantShopMenu : MerchZFGenericMenu
{
	MerchantHandler Handler;
	int SelCategoryIndex;
	int SelItemIndex; // [Ace] This is only used within a specific category. Don't bother using it with the full array.
	int SelCurrencyIndex;
	Array<StoreItem> ItemsInCategory;

	const TextScale = 1.0; // [Ace] Not really used anymore, but still here so I don't have to reimplement it if needed.
	const Spacing = 3;

	override void Init(Menu parent)
	{
		Super.Init(parent);

		menuactive = Menu.OnNoPause;
		Handler = MerchantHandler(EventHandler.Find("MerchantHandler"));
		GetItemsInCategory(ItemsInCategory, GetSelectedCategory());

		vector2 virtRes = (640, 480);
		SetBaseResolution(virtRes);

		vector2 basePos = (virtRes.x * 0.1, 10);

		vector2 sSize = (virtRes.x - basePos.x * 2, 30);
		BuildShopFrame(basePos, sSize);

		vector2 iPos = (basePos.x, basePos.y + sSize.y + Spacing);
		vector2 iSize = (virtRes.x - basePos.x * 2, virtRes.y - basePos.y * 2 - (sSize.y + Spacing) * 0.90);
		BuildItemFrames(iPos, iSize);
	}

	ui MerchantStore GetOpenedStore()
	{
		return Handler.Stores[Handler.OpenedStoreIndex[consoleplayer]];
	}

	ui string GetSelectedCategory()
	{
		let openedStore = GetOpenedStore();
		if (SelCategoryIndex < openedStore.Categories.Size())
		{
			return openedStore.Categories[SelCategoryIndex];
		}

		return "Unknown Category";
	}

	private ui void GetItemsInCategory(out Array<StoreItem> items, string category)
	{
		items.Clear();

		foreach (storeItem : GetOpenedStore().storeItems)
		{
			if (
				storeItem.GetCategory() == category
				&& storeItem.GetItem() != Handler.StoreCurrencies[SelCurrencyIndex].GetCurrencyClass()
			) items.Push(storeItem);
		}
		SelItemIndex = clamp(SelItemIndex, 0, items.Size() - 1);
	}

	private ui void BuildShopFrame(vector2 pos, vector2 size)
	{
		let sFrame = MerchZFFrame.create(pos, size);
		let height = sFrame.getHeight();

		let iconWidth = height * 2;
		let currencyWidth = 35;

		let frameBg = MerchZFBoxImage.create(
			(0,0),
			sFrame.getSize(),
			MerchZFBoxTextures.createTexturePixels('Graphics/CommonBackground.png', (7,7), (14,14), true, true)
		);
		frameBg.pack(sFrame);


		// ----- CATEGORY -----

		vector2 prevArrowSize = TexMan.GetScaledSize(TexMan.CheckForTexture("PREVARRW", TexMan.Type_Any));
		let prevArrow = MerchZFImage.create(
			(5, 0),
			(prevArrowSize.x, height),
			"PREVARRW",
			MerchZFElement.AlignType_CenterLeft
		);
		prevArrow.pack(sFrame);

		let catLabel = MerchZFLabel.create(
			(0, 0),
			(sFrame.getWidth(), sFrame.getHeight()),
			GetSelectedCategory(),
			BigFont,
			MerchZFElement.AlignType_Center,
			wrap: false
		);
		catLabel.pack(sFrame);

		vector2 nextArrowSize = TexMan.GetScaledSize(TexMan.CheckForTexture("NEXTARRW", TexMan.Type_Any));
		let nextArrow = MerchZFImage.create(
			(sFrame.getWidth() - currencyWidth - MerchantShopMenu.Spacing - nextArrowSize.x - 5, 0),
			(nextArrowSize.x, height),
			"NEXTARRW",
			MerchZFElement.AlignType_CenterRight
		);
		nextArrow.pack(sFrame);


		// ----- CURRENCY + AMOUNT -----

		StoreCurrency currency = Handler.StoreCurrencies[SelCurrencyIndex];
		string curIconString = currency.GetIcon();
		vector2 curIconSize = TexMan.GetScaledSize(TexMan.CheckForTexture(curIconString, TexMan.Type_Any));
		double curIconScale = 1.0 / MerchantShopMenu.GetBoxedScale(curIconSize, (20, 14));
		let curImg = MerchZFImage.create(
			(sFrame.getWidth() - currencyWidth, 0),
			(currencyWidth, height),
			curIconString,
			MerchZFElement.AlignType_Center,
			(curIconScale, curIconScale)
		);
		curImg.pack(sFrame);

		string currencyAmount = BaseStatusBar.FormatNumber(players[consoleplayer].mo.CountInv(currency.GetCurrencyClass()), 1, 4);
		let curAmt = MerchZFLabel.create(
			(sFrame.getWidth() - currencyWidth, 0),
			(currencyWidth, height),
			currencyAmount,
			SmallFont,
			MerchZFElement.AlignType_BottomCenter,
			textScale: MerchantShopMenu.TextScale,
			textColor: Font.CR_GOLD
		);
		curAmt.pack(sFrame);

		sFrame.Pack(MainFrame);
	}

	private ui void BuildItemFrames(vector2 pos, vector2 size)
	{
		let container = MerchZFListFrame.create(pos, size, MerchantShopMenu.Spacing);
		let scrollContainer = MerchZFScrollContainer.create(
			pos, size + (8, 0),
			8.0, size.y, 15.0,
			MerchZFBoxTextures.createTexturePixels('Graphics/CommonBackgroundNormal.png', (7,7), (14,14), true, true),
			MerchZFBoxTextures.createTexturePixels('Graphics/CommonBackgroundHover.png', (7,7), (14,14), true, true),
			MerchZFBoxTextures.createTexturePixels('Graphics/CommonBackgroundClick.png', (7,7), (14,14), true, true),
			MerchZFBoxTextures.createTexturePixels('Graphics/CommonBackground.png', (7,7), (14,14), true, true),
			container,
			MerchantShopMenu.Spacing
		);


		for (int i = 0; i < ItemsInCategory.Size(); ++i)
		{
			// [Ace] I'm not too sure where else to put this.
			if (!ItemsInCategory[i])
			{
				ItemsInCategory.Delete(i);
				SelItemIndex = max(0, i - 1);
				continue;
			}

			BuildItemFrame(
				container,
				players[consoleplayer].mo,
				ItemsInCategory[i],
				(0, 0),
				(container.getWidth(), 30),
				i == SelItemIndex
			);
		}

		scrollContainer.Pack(MainFrame);
	}

	private ui void BuildItemFrame(MerchZFFrame parent, PlayerPawn plr, StoreItem item, vector2 pos, vector2 size, bool selected)
	{
		let iFrame = MerchZFFrame.create(pos, size);
		let height = iFrame.getHeight();

		let iconWidth = height * 2;
		let currencyWidth = 35;

		let frameBg = MerchZFBoxImage.create(
			(0,0),
			iFrame.getSize(),
			MerchZFBoxTextures.createTexturePixels('Graphics/CommonBackground.png', (7,7), (14,14), true, true)
		);
		frameBg.pack(iFrame);


		// ----- ICON -----

		vector2 itemIconSize = TexMan.GetScaledSize(TexMan.CheckForTexture(item.GetIcon(), TexMan.Type_Any));
		let itemIconScale = 1.0 / MerchantShopMenu.GetBoxedScale(itemIconSize, (iconWidth, height) * 0.8);

		let itemIcon = MerchZFImage.create(
			(0, 0),
			(iconWidth, height),
			item.GetIcon(),
			MerchZFElement.AlignType_Center,
			(itemIconScale, itemIconScale)
		);
		itemIcon.pack(iFrame);


		// ----- NAME & FLAVOR TEXT -----

		vector2 contentPos = (1.5 + iconWidth + MerchantShopMenu.Spacing, 1.5);
		let contentWidth = iFrame.getWidth() - (iconWidth * 2 + MerchantShopMenu.Spacing * 2);

		int amount = item.GetAmount();
		let itemTagLabel = MerchZFLabel.create(
			contentPos,
			(contentWidth, SmallFont.GetHeight()),
			(amount > 1 ? "\c[White]"..amount.."\c- " : "")..item.GetDisplayName().."\c[Yellow] ("..item.StoreAmount.." remaining)\c-",
			SmallFont,
			textColor: Font.CR_GREEN
		);
		itemTagLabel.pack(iFrame);

		let flavorLabel = MerchZFLabel.create(
			contentPos + (0, itemTagLabel.getHeight()),
			(contentWidth, ConFont.GetHeight()),
			item.GetFlavorText(),
			ConFont,
			textColor: Font.CR_DARKGRAY
		);
		flavorLabel.pack(iFrame);


		// ----- PRICE -----

		let currency = Handler.StoreCurrencies[SelCurrencyIndex];

		string curIconString = currency.GetIcon();
		TextureID curIcon = TexMan.CheckForTexture(curIconString, TexMan.Type_Any);
		vector2 curIconSize = TexMan.GetScaledSize(curIcon);
		let curIconScale = 1.0 / MerchantShopMenu.GetBoxedScale(curIconSize, (20, 14));
		let curImg = MerchZFImage.create(
			(iFrame.getWidth() - currencyWidth, 0),
			(currencyWidth, height),
			curIconString,
			MerchZFElement.AlignType_Center,
			(curIconScale, curIconScale)
		);
		curImg.pack(iFrame);

		int price = StoreItem.GetAdjustedPrice(item, currency);
		let priceLabel = MerchZFLabel.create(
			(iFrame.getWidth() - currencyWidth, 0),
			(currencyWidth, height),
			price.."",
			SmallFont,
			MerchZFElement.AlignType_BottomCenter,
			textScale: MerchantShopMenu.TextScale,
			textColor: price <= plr.CountInv(currency.GetCurrencyClass()) ? Font.CR_WHITE : Font.CR_RED
		);
		priceLabel.pack(iFrame);

		iFrame.pack(parent);
	}

	static clearscope double GetBoxedScale(vector2 size, vector2 boxSize)
	{
		return max(size.x / boxSize.x, size.y / boxSize.y);
	}

	override bool menuEvent(int type, bool fromController)
	{
		switch (type)
		{
			case MKEY_Back:
			{
				Close();
				return true;
			}
			case MKEY_Left:
				SelItemIndex = 0;
				if (--SelCategoryIndex < 0)
				{
					SelCategoryIndex = GetOpenedStore().Categories.Size() - 1;
				}
				GetItemsInCategory(ItemsInCategory, GetSelectedCategory());
				break;
			case MKEY_Right:
				SelItemIndex = 0;
				if (++SelCategoryIndex == GetOpenedStore().Categories.Size())
				{
					SelCategoryIndex = 0;
				}
				GetItemsInCategory(ItemsInCategory, GetSelectedCategory());
				break;
			case MKEY_Up:
				if (--SelItemIndex < 0)
				{
					SelItemIndex = ItemsInCategory.Size() - 1;
				}
				break;
			case MKEY_Down:
				if (++SelItemIndex == ItemsInCategory.Size())
				{
					SelItemIndex = 0;
				}
				break;
			case MKEY_PageUp:
				if (--SelCurrencyIndex < 0)
				{
					SelCurrencyIndex = Handler.StoreCurrencies.Size() - 1;
				}
				GetItemsInCategory(ItemsInCategory, GetSelectedCategory());
				break;
			case MKEY_PageDown:
				if (++SelCurrencyIndex > Handler.StoreCurrencies.Size() - 1)
				{
					SelCurrencyIndex = 0;
				}
				GetItemsInCategory(ItemsInCategory, GetSelectedCategory());
				break;
			case MKEY_Enter:
				GetItemsInCategory(ItemsInCategory, GetSelectedCategory());
				if (ItemsInCategory.Size() > 0)
				{
					EventHandler.SendNetworkEvent(String.Format("%s:%s", "HDM_BuyStuff", ItemsInCategory[SelItemIndex].GetClassName()), SelCurrencyIndex);
				}
				break;
		}

		return false;
	}
}